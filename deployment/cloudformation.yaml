AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: AWS CloudFormation template for Amazon IVS Rekognition demo - suffix <RANDOM_SUFFIX>

Parameters:
  PlayerAppBucketName:
    Type: String
    Description: Name of the Player App bucket
    Default: ivs-rekognition-demo-player-app-<RANDOM_SUFFIX>

  LambdaFunctionsBucketName:
    Type: String
    Description: Name of the bucket that contains the Lambda functions zip files
    Default: ivs-rekognition-demo-lambda-functions-<RANDOM_SUFFIX>

  DynamoDBConnectionsTableName:
    Type: String
    Description: Name of the DynamoDB connections table
    Default: ivs-rekognition-demo-connections-<RANDOM_SUFFIX>

  # S3 resources parameters
  IVSChannelName:
    Type: String
    Description: Name of the Amazon IVS Channel
    Default: ivs-rekognition-demo-channel-<RANDOM_SUFFIX>

  # ECS resources parameters
  ECSClusterName:
    Type: String
    Description: Name of the ECS Cluster
    Default: ivs-rekognition-demo-cluster-<RANDOM_SUFFIX>

  StreamServiceName:
    Type: String
    Description: Name of the ECS Stream service
    Default: ivs-rekognition-demo-stream-service-<RANDOM_SUFFIX>

  RekognitionServiceName:
    Type: String
    Description: Name of the ECS Rekognition service
    Default: ivs-rekognition-demo-rekognition-service-<RANDOM_SUFFIX>

  StreamTaskDefinitionName:
    Type: String
    Description: Name of the ECS Stream service task definition
    Default: ivs-rekognition-demo-stream-task-definition-<RANDOM_SUFFIX>

  RekognitionTaskDefinitionName:
    Type: String
    Description: Name of the ECS Rekognition service task definition
    Default: ivs-rekognition-demo-rekognition-task-definition-<RANDOM_SUFFIX>

  StreamContainerDefinitionName:
    Type: String
    Description: Name of the ECS Stream service container definition
    Default: ivs-rekognition-demo-stream-container-definition-<RANDOM_SUFFIX>

  RekognitionContainerDefinitionName:
    Type: String
    Description: Name of the ECS Rekognition service container definition
    Default: ivs-rekognition-demo-rekognition-container-definition-<RANDOM_SUFFIX>

  StreamServiceLogGroupName:
    Type: String
    Description: Name of the ECS Stream service CloudWatch log group
    Default: /ecs/ivs-rekognition-demo-stream-logs-<RANDOM_SUFFIX>

  RekognitionServiceLogGroupName:
    Type: String
    Description: Name of the ECS Rekognition service CloudWatch log group
    Default: /ecs/ivs-rekognition-demo-rekognition-logs-<RANDOM_SUFFIX>

  PrivateDNSNamespaceName:
    Type: String
    Description: Name of the private DNS Namespace
    Default: rtmp

  StreamServiceDiscoveryName:
    Type: String
    Description: Name of the ECS Stream Service Discovery
    Default: stream-service-discovery

  RekognitionServiceDiscoveryName:
    Type: String
    Description: Name of the Rekognition Service Discovery
    Default: rekognition-service-discovery

  ECRStreamRepositoryName:
    Type: String
    Description: Name of the private DNS Namespace for the Stream ECR repository
    Default: ivs-rekognition-demo-stream-images-<RANDOM_SUFFIX>

  ECRRekognitionRepositoryName:
    Type: String
    Description: Name of the private DNS Namespace for the Stream ECR repository
    Default: ivs-rekognition-demo-rekognition-images-<RANDOM_SUFFIX>

  # Reader/Writer WebSocket implementation parameters
  WriterWebSocketName:
    Type: String
    Description: Name of the writer WebSocket used by the server
    Default: ivs-rekognition-demo-writer-websocket-<RANDOM_SUFFIX>

  ReaderWebSocketName:
    Type: String
    Description: Name of the reader WebSocket used by clients
    Default: ivs-rekognition-demo-reader-websocket-<RANDOM_SUFFIX>

  LambdaOnConnectFunctionName:
    Type: String
    Description: Name of the lambda-on-connect function
    Default: ivs-rekognition-demo-lambda-on-connect-<RANDOM_SUFFIX>

  LambdaOnDisconnectFunctionName:
    Type: String
    Description: Name of the lambda-on-disconnect function
    Default: ivs-rekognition-demo-lambda-on-disconnect-<RANDOM_SUFFIX>

  LambdaSendMessageFunctionName:
    Type: String
    Description: Name of the lambda-send-message function
    Default: ivs-rekognition-demo-lambda-send-message-<RANDOM_SUFFIX>

  LambdaSendMessageChunksFunctionName:
    Type: String
    Description: Name of the lambda-send-message-chunks function
    Default: ivs-rekognition-demo-lambda-send-message-chunks-<RANDOM_SUFFIX>

  LambdaDeleteStaleConnectionFunctionName:
    Type: String
    Description: Name of the lambda-delete-stale-connection function
    Default: ivs-rekognition-demo-delete-stale-connection-<RANDOM_SUFFIX>

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "24.0.0.0/16"
    Subnet:
      CIDR: "24.0.0.0/24"

Resources:
  ################################# ECS Resources
  # VPC
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !FindInMap ["SubnetConfig", "VPC", "CIDR"]
      EnableDnsHostnames: true
      EnableDnsSupport: true

  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap ["SubnetConfig", "Subnet", "CIDR"]
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  PrivateDnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref PrivateDNSNamespaceName
      Vpc: !Ref VPC

  ## Security groups
  StreamServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Stream service
      VpcId: !Ref VPC

  StreamServiceSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt StreamServiceSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 1935
      ToPort: 1935
      CidrIp: 0.0.0.0/0

  StreamServiceSecurityGroupOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt StreamServiceSecurityGroup.GroupId
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  ## Log groups
  StreamServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref StreamServiceLogGroupName

  RekognitionServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref RekognitionServiceLogGroupName

  ## Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName

  ## Roles
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"

                  # Rules for API Gateway
                  - "execute-api:ManageConnections"

                  # Rules for IVS
                  - "ivs:PutMetadata"

                  # Rules for Rekognition. We should do it more specific later
                  - "rekognition:*"

                Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  ## Stream service
  StreamTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref StreamTaskDefinitionName
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref StreamContainerDefinitionName
          ReadonlyRootFilesystem: false # disabled
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRStreamRepositoryName}:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-group: !Ref StreamServiceLogGroupName
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 1935
              HostPort: 1935
              Protocol: "tcp"
            - ContainerPort: 19351
              HostPort: 19351
              Protocol: "tcp"
          Environment:
            - Name: IVS_INGEST_ENDPOINT
              Value: !Sub ${IVSChannel.IngestEndpoint}:443
            - Name: IVS_KEY
              Value: !GetAtt IVSStreamKey.Value
            - Name : STREAM_KEY
              Value: !Sub streamkey-${AWS::StackName}-<RANDOM_SUFFIX>
            - Name: IVS_CHANNEL_ARN
              Value: !Ref IVSChannel
          Cpu: 0
      Memory: 4096
      TaskRoleArn: !GetAtt ECSRole.Arn
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 2048

  StreamServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Ref StreamServiceDiscoveryName
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
      NamespaceId: !Ref PrivateDnsNamespace

  StreamService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      ServiceName: !Ref StreamServiceName
      TaskDefinition: !Ref StreamTaskDefinition
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet
          SecurityGroups:
            - !Ref StreamServiceSecurityGroup
      # Service discovery
      ServiceRegistries:
        - RegistryArn: !GetAtt StreamServiceDiscovery.Arn

  ################################## IVS resources
  IVSChannel:
    Type: AWS::IVS::Channel
    Properties:
      Name: !Ref IVSChannelName

  IVSStreamKey:
    Type: AWS::IVS::StreamKey
    Properties:
      ChannelArn: !Ref IVSChannel

  ################################## API Gateway resources
  # Api gateway role
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "lambda:InvokeFunction"
                Resource: "*"

  ################################## S3 resources
  PlayerAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref PlayerAppBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  PlayerAppBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref PlayerAppBucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontPlayerAppOriginAccessIdentity}"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${PlayerAppBucket}/*"

  CloudFrontPlayerAppOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${PlayerAppBucketName}.s3.amazonaws.com"

  CloudFrontPlayerAppDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: ["PlayerAppBucket"]
    Properties:
      DistributionConfig:
        DefaultRootObject: "index.html"
        Enabled: true
        Origins:
          - DomainName: !GetAtt PlayerAppBucket.RegionalDomainName
            ConnectionAttempts: 3
            ConnectionTimeout: 10
            Id: !Sub "S3-${PlayerAppBucketName}"
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontPlayerAppOriginAccessIdentity}"
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: "true"
        DefaultCacheBehavior:
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: !Sub "S3-${PlayerAppBucketName}"
          ForwardedValues:
            QueryString: false

  ################################## REKOGNITION DEMO RESOURCES
  ################ READER/WRITER WEBSOCKET
  WriterWebSocket:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Ref WriterWebSocketName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ReaderWebSocket:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Ref ReaderWebSocketName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ## Reader WebSocket routes
  ### $connect
  ReaderWebSocketRouteConnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ReaderWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref ReaderWebSocketRouteConnectIntegration

  ReaderWebSocketRouteConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ReaderWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaOnConnect.Arn}/invocations
      CredentialsArn: !GetAtt ApiGatewayRole.Arn

  ### $disconnect
  ReaderWebSocketRouteDisconnect:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ReaderWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref ReaderWebSocketRouteDisconnectIntegration

  ReaderWebSocketRouteDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ReaderWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaOnDisconnect.Arn}/invocations
      CredentialsArn: !GetAtt ApiGatewayRole.Arn

  ## Writer WebSocket routes
  ### sendmessage
  WriterWebSocketRouteSendMessage:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WriterWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WriterWebSocketRouteSendMessageIntegration

  WriterWebSocketRouteSendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WriterWebSocket
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSendMessage.Arn}/invocations
      CredentialsArn: !GetAtt ApiGatewayRole.Arn

  ReaderWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: demo
      ApiId: !Ref ReaderWebSocket

  WriterWebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: demo
      ApiId: !Ref WriterWebSocket

  ReaderWebSocketDeployment:
    DependsOn: [ReaderWebSocketRouteConnect, ReaderWebSocketRouteDisconnect]
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref ReaderWebSocket
      StageName: demo

  WriterWebSocketDeployment:
    DependsOn: [WriterWebSocketRouteSendMessage]
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WriterWebSocket
      StageName: demo

  ################ WEBSOCKET CONNECTIONS TABLE (DynamoDB)
  DynamoDbConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "connectionId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "connectionId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref DynamoDBConnectionsTableName

  ################ LAMBDAS
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # Rules for DynamoDB
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:PutItem"
                  - "dynamodb:DeleteItem"

                  # Rules for CloudWatch
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"

                  # Rules for API Gateway
                  - "execute-api:ManageConnections"

                  # Rules for lambdas
                  - 'lambda:InvokeFunction'
                Resource: "*"

  LambdaOnConnect:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: lambda-on-connect.zip
      FunctionName: !Ref LambdaOnConnectFunctionName
      Handler: app.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBConnectionsTableName

  LambdaOnDisconnect:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: lambda-on-disconnect.zip
      FunctionName: !Ref LambdaOnDisconnectFunctionName
      Handler: app.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBConnectionsTableName

  LambdaSendMessage:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: lambda-send-message.zip
      FunctionName: !Ref LambdaSendMessageFunctionName
      Handler: app.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBConnectionsTableName
          GATEWAY_DOMAIN: !Sub "${ReaderWebSocket}.execute-api.${AWS::Region}.amazonaws.com/demo"
          LAMBDA_SEND_MESSAGE_CHUNKS_NAME: !Ref LambdaSendMessageChunksFunctionName
          LAMBDA_DELETE_STALE_CONNECTION_NAME: !Ref LambdaDeleteStaleConnectionFunctionName

  LambdaSendMessageChunks:
    Type: AWS::Lambda::Function
    Properties: 
      Role: !GetAtt LambdaExecutionRole.Arn 
      Code: 
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: lambda-send-message-chunks.zip
      FunctionName: !Ref LambdaSendMessageChunksFunctionName
      Handler: app.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBConnectionsTableName
          GATEWAY_DOMAIN: !Sub "${ReaderWebSocket}.execute-api.${AWS::Region}.amazonaws.com/demo"
          LAMBDA_DELETE_STALE_CONNECTION_NAME: !Ref LambdaDeleteStaleConnectionFunctionName

  LambdaDeleteStaleConnection:
    Type: AWS::Lambda::Function
    Properties: 
      Role: !GetAtt LambdaExecutionRole.Arn 
      Code: 
        S3Bucket: !Ref LambdaFunctionsBucketName
        S3Key: lambda-delete-stale-connection.zip
      FunctionName: !Ref LambdaDeleteStaleConnectionFunctionName
      Handler: app.handler
      Runtime: nodejs14.x
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBConnectionsTableName

  ################ SECURITY GROUPS
  RekognitionServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Rekognition service
      VpcId: !Ref VPC

  RekognitionServiceSecurityGroupOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt RekognitionServiceSecurityGroup.GroupId
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  ################ ECS
  RekognitionTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref RekognitionTaskDefinitionName
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref RekognitionContainerDefinitionName
          ReadonlyRootFilesystem: false # disabled
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRekognitionRepositoryName}:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-group: !Ref RekognitionServiceLogGroupName
              awslogs-stream-prefix: ecs
          Cpu: 0
          Environment:
            - Name: REGION
              Value: !Sub "${AWS::Region}"
            - Name: SCREENSHOT_INTERVAL
              Value: 500
            - Name: WEBSOCKET_SERVER_URI
              Value: !Sub "wss://${WriterWebSocket}.execute-api.${AWS::Region}.amazonaws.com/${WriterWebSocketStage}"
            - Name: IVS_CHANNEL_ARN
              Value: !Ref IVSChannel
            - Name: REKOGNITION_IGNORES
              Value: ""
            - Name: REKOGNITION_MATCHES
              Value: ""
            - Name: RTMP_INPUT
              Value: !Sub rtmp://${StreamServiceDiscovery.Name}.${PrivateDNSNamespaceName}/ivs/streamkey-${AWS::StackName}-<RANDOM_SUFFIX>
      Memory: 30720
      TaskRoleArn: !GetAtt ECSRole.Arn
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 4096

  RekognitionServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: !Ref RekognitionServiceDiscoveryName
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
      NamespaceId: !Ref PrivateDnsNamespace

  RekognitionService:
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      ServiceName: !Ref RekognitionServiceName
      TaskDefinition: !Ref RekognitionTaskDefinition
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet
          SecurityGroups:
            - !Ref RekognitionServiceSecurityGroup

Outputs:
  AWSRegion:
    Value: !Ref AWS::Region

  StreamPlaybackURL:
    Value: !GetAtt IVSChannel.PlaybackUrl

  PlayerAppURL:
    Value: !GetAtt CloudFrontPlayerAppDistribution.DomainName

  StreamKey:
    Value: !Sub streamkey-${AWS::StackName}-<RANDOM_SUFFIX>

  ClusterName:
    Value: !Ref ECSClusterName

  StreamServiceName:
    Value: !Ref StreamServiceName

  ReaderWebSocketURL:
    Value: !Sub "wss://${ReaderWebSocket}.execute-api.${AWS::Region}.amazonaws.com/demo"

  WriterWebSocketApiId:
    Value: !Ref WriterWebSocket

  ReaderWebSocketApiId:
    Value: !Ref ReaderWebSocket

  CloudFrontPlayerAppDistribution:
    Description: "Cloudfront distribution ID for Player"
    Value: !Ref CloudFrontPlayerAppDistribution